//----------------------------
// Name: Your Name Here
// Date: Spring 2024
// Class: Operating Systems
// Assignment: Smart Shell
//----------------------------

#include <string.h>    /* for strcpy and strtok */
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>

/* Include other header files that are needed */

#define MAX_ARGV  10 /* maximum number of command tokens */
#define MAX_CMD   80 /* maximum length of command */

void tokenize_cmd (char * cmd, int max, char * argv[])
/* Input:  cmd is the command to be tokenized
 *         max is the maximum number of tokens allowed  
 * Output: argv is the array of tokens (command arguments) 
 */
{
    int num_args = 0;           /* number of arguments (tokens) in cmd */

    if(cmd == NULL) return;     /* nothing to do */

    /* Tokenize the command */
    argv[0] = strtok(cmd, " \n");
    while((num_args < max) && (argv[num_args] != NULL))
    {
       num_args++;
       argv[num_args] = strtok(NULL, " \n");
    }
}

void execute_cmd(char * cmd)
{
    char * argv[MAX_ARGV];  /* array of command arguments*/
    char cmd_copy[MAX_CMD]; /* buffer to store local copy of cmd*/

    /* Make a local copy of the command */
    if(cmd == NULL) return; /* nothing to do */
    strcpy(cmd_copy, cmd);

    /* Tokenize the command */
    tokenize_cmd(cmd_copy, MAX_ARGV, argv);

    /* Fork a child to execute the command 
     *   - if execvp fails, print an error message and exit
     */
    /* Parent waits for child to finish execution */
	int ret; 
	ret = fork();

	wait(NULL);

	if(ret == 0)
	{
		int ret2 = execvp(cmd_copy, argv);
		if(ret2 == -1)
		{
			perror("execvp failed");
			exit(EXIT_FAILURE);
		}
	}
    
}

int main()
{
    /* Step 1:
     *   Add calls to execute_cmd here to test it out. 
     *   Example: execute_cmd("ps -f");
     *   ... other commands you wish to try here ...
     */

  	execute_cmd("ps -f");

    /*
     * Step 2: 
     *   Add code for your smart shell
     *   Read and process commands in an infinite loop
     *   Exit when the user types "quit" 
     */
    
     return 0;
}
